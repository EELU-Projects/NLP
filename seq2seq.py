# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s_B1UfmX66GTDriv4-UYNcFWURqOUsDQ
"""

import numpy as np
import keras
import pandas as pd
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.layers import LSTM, Dense, Input, AdditiveAttention, Concatenate

# Hyperparameters (optimized for better training)
batch_size = 256  # Increased from 128
epochs = 70  # Increased from 50
latent_dim = 512  # Increased from 256
data_path = "data/captions.txt"
arabic_captions_file = "data/captions_arabic.txt"

# Step 1: Load Flicker8k captions and their Arabic translations
def load_flicker8k_captions_with_translation():
    captions_file = "data/captions.txt"
    arabic_captions_file = "data/captions_arabic.txt"  # Assumed Arabic translations file

    # Load English captions
    captions_df = pd.read_csv(captions_file)
    captions_df['caption'] = captions_df['caption'].apply(lambda x: str(x).lower().strip())

    # Load Arabic translations (assumed to be in the same order)
    arabic_df = pd.read_csv(arabic_captions_file)
    # Handle missing values by converting to string and replacing NaN with empty string
    arabic_df['arabic_caption'] = arabic_df['arabic_caption'].fillna('').astype(str)
    arabic_df['arabic_caption'] = arabic_df['arabic_caption'].apply(lambda x: x.lower().strip())

    # Get first 200 unique images (1000 captions)
    unique_images = captions_df['image'].unique()[:200]
    filtered_captions = captions_df[captions_df['image'].isin(unique_images)]
    filtered_arabic = arabic_df.iloc[:len(filtered_captions)]  # Match the order

    input_texts = filtered_captions['caption'].tolist()
    target_texts = ["\t" + text + "\n" for text in filtered_arabic['arabic_caption'].tolist()]

    return input_texts, target_texts

# Load data
input_texts, target_texts = load_flicker8k_captions_with_translation()

# Character-level tokenization
input_characters = set()
target_characters = set()
for input_text, target_text in zip(input_texts, target_texts):
    for char in input_text:
        if char not in input_characters:
            input_characters.add(char)
    for char in target_text:
        if char not in target_characters:
            target_characters.add(char)

input_characters = sorted(list(input_characters))
target_characters = sorted(list(target_characters))
num_encoder_tokens = len(input_characters)
num_decoder_tokens = len(target_characters)
max_encoder_seq_length = max([len(txt) for txt in input_texts])
max_decoder_seq_length = max([len(txt) for txt in target_texts])

print("Number of samples:", len(input_texts))
print("Number of unique input tokens:", num_encoder_tokens)
print("Number of unique output tokens:", num_decoder_tokens)
print("Max sequence length for inputs:", max_encoder_seq_length)
print("Max sequence length for outputs:", max_decoder_seq_length)

# Create token indices
input_token_index = dict([(char, i) for i, char in enumerate(input_characters)])
target_token_index = dict([(char, i) for i, char in enumerate(target_characters)])

# Prepare data for training
encoder_input_data = np.zeros(
    (len(input_texts), max_encoder_seq_length, num_encoder_tokens),
    dtype="float32",
)
decoder_input_data = np.zeros(
    (len(input_texts), max_decoder_seq_length, num_decoder_tokens),
    dtype="float32",
)
decoder_target_data = np.zeros(
    (len(input_texts), max_decoder_seq_length, num_decoder_tokens),
    dtype="float32",
)

for i, (input_text, target_text) in enumerate(zip(input_texts, target_texts)):
    for t, char in enumerate(input_text):
        encoder_input_data[i, t, input_token_index[char]] = 1.0
    encoder_input_data[i, t + 1 :, input_token_index[" "]] = 1.0
    for t, char in enumerate(target_text):
        decoder_input_data[i, t, target_token_index[char]] = 1.0
        if t > 0:
            decoder_target_data[i, t - 1, target_token_index[char]] = 1.0
    decoder_input_data[i, t + 1 :, target_token_index[" "]] = 1.0
    decoder_target_data[i, t:, target_token_index[" "]] = 1.0

# Verify data integrity (to fix validation metrics issue)
if np.any(np.isnan(encoder_input_data)) or np.any(np.isnan(decoder_input_data)) or np.any(np.isnan(decoder_target_data)):
    raise ValueError("NaN values found in input data. Please check the dataset.")
if np.all(decoder_target_data == 0):
    raise ValueError("Decoder target data is all zeros. Please check the data preparation step.")

# Define training model with Attention
encoder_inputs = Input(shape=(None, num_encoder_tokens))
encoder = LSTM(latent_dim, return_sequences=True, return_state=True, dropout=0.2, recurrent_dropout=0.2)
encoder_outputs, state_h, state_c = encoder(encoder_inputs)
encoder_states = [state_h, state_c]

decoder_inputs = Input(shape=(None, num_decoder_tokens))
decoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True, dropout=0.2, recurrent_dropout=0.2)
decoder_outputs, _, _ = decoder_lstm(decoder_inputs, initial_state=encoder_states)

# Add Attention
attention = AdditiveAttention(name='attention')
context_vector = attention([decoder_outputs, encoder_outputs])
decoder_combined_context = Concatenate(axis=-1)([decoder_outputs, context_vector])

decoder_dense = Dense(num_decoder_tokens, activation="softmax")
decoder_outputs = decoder_dense(decoder_combined_context)

model = keras.Model([encoder_inputs, decoder_inputs], decoder_outputs)

# Compile and train
model.compile(
    optimizer="adam",
    loss="categorical_crossentropy",
    metrics=["accuracy"]
)
early_stopping = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)  # Reduced from 5 to 3
checkpoint = ModelCheckpoint("s2s_model_best.keras", monitor='val_loss', save_best_only=True)

model.fit(
    [encoder_input_data, decoder_input_data],
    decoder_target_data,
    batch_size=batch_size,
    epochs=epochs,
    validation_split=0.2,
    callbacks=[early_stopping, checkpoint]
)
model.save("s2s_model.keras")

# Define inference models
encoder_model = keras.Model(encoder_inputs, [encoder_outputs, encoder_states])

decoder_state_input_h = Input(shape=(latent_dim,))
decoder_state_input_c = Input(shape=(latent_dim,))
decoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]
decoder_outputs, state_h, state_c = decoder_lstm(decoder_inputs, initial_state=decoder_states_inputs)
decoder_states = [state_h, state_c]

# Attention in inference
encoder_out_inf, encoder_states_inf = encoder_model(encoder_inputs)
context_vector_inf = attention([decoder_outputs, encoder_out_inf])
decoder_combined_context_inf = Concatenate(axis=-1)([decoder_outputs, context_vector_inf])
decoder_outputs_inf = decoder_dense(decoder_combined_context_inf)

decoder_model = keras.Model(
    [decoder_inputs] + [encoder_out_inf] + decoder_states_inputs,
    [decoder_outputs_inf] + decoder_states
)

# Beam search decoding with debugging
def beam_search_decode(input_text, max_encoder_seq_length, max_decoder_seq_length, beam_width=10):
    input_seq = np.zeros((1, max_encoder_seq_length, num_encoder_tokens), dtype="float32")
    for t, char in enumerate(input_text):
        if t < max_encoder_seq_length and char in input_token_index:
            input_seq[0, t, input_token_index[char]] = 1.0
    input_seq[0, t + 1 :, input_token_index[" "]] = 1.0

    encoder_out, states_value = encoder_model.predict(input_seq, verbose=0)

    sequences = [[[], 0.0, states_value[0], states_value[1]]]
    for _ in range(max_decoder_seq_length):
        all_candidates = []
        for seq, score, h, c in sequences:
            if seq and seq[-1] == "\n":
                all_candidates.append([seq, score, h, c])
                continue
            target_seq = np.zeros((1, 1, num_decoder_tokens), dtype="float32")
            target_seq[0, 0, target_token_index["\t" if not seq else seq[-1]]] = 1.0
            output_tokens, h, c = decoder_model.predict([target_seq, encoder_out, h, c], verbose=0)
            # Debug: Check if output_tokens has meaningful probabilities
            if np.all(output_tokens == 0):
                print("Warning: Decoder output is all zeros. Model may not be trained properly.")
                return ""
            top_indices = np.argsort(output_tokens[0, 0])[::-1][:beam_width]  # Get top beam_width indices
            for i in top_indices:
                char = [char for char, idx in target_token_index.items() if idx == i][0]
                candidate_score = score - np.log(output_tokens[0, 0, i] + 1e-10)
                all_candidates.append([seq + [char], candidate_score, h, c])
        sequences = sorted(all_candidates, key=lambda x: x[1])[:beam_width]
        if all(seq[0][-1] == "\n" for seq, _, _, _ in sequences):
            break

    best_seq = sequences[0][0]
    return "".join(best_seq).strip()

# Main execution: Test the model
def main():
    # Translate first 5 captions
    print("\nTranslating Flicker8k captions to Arabic:")
    for i, caption in enumerate(input_texts[:5]):
        translated = beam_search_decode(caption, max_encoder_seq_length, max_decoder_seq_length)
        print(f"English: {caption}")
        print(f"Arabic: {translated}\n")

if __name__ == "__main__":
    main()